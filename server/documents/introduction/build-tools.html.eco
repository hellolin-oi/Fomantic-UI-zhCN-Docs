---
layout      : 'default'
css         : 'started'
standalone  : true
order       : 3

title       : '构建工具'
description : '在 Fomantic UI 中使用 Gulp'
type        : 'Introduction'
---
<%- @partial('header') %>

<div class="main ui intro container">

  <h2 class="ui dividing header">概述</h2>

  <div class="no example">
    <h4>30 秒解释</h4>
    <p><a href="/introduction/getting-started.html">下载 Fomantic UI</a> 后，打开安装文件夹，即可运行 <a href="#gulp-commands">gulp 命令</a>。</p>

    <p>构建所有文件：</p>
    <div class="code" data-type="bash">
      npx gulp build
    </div>

    <p>监听文件变化：</p>
    <div class="code" data-type="bash">
      npx gulp watch
    </div>
  </div>
  <div class="no example">
    <h4>为啥要用构建工具？</h4>
    <p>有以下几个原因：</p>
    <div class="ui large bulleted list">
      <div class="item">可使用 <a href="/usage/theming.html">主题化变量</a> 处理 LESS 文件</div>
      <div class="item">可为 <a href="https://github.com/fomantic/Fomantic-UI/blob/master/README.md#-browser-support">支持的浏览器</a> 使用 <a href="https://github.com/postcss/autoprefixer" target="_blank">autoprefixer</a> 添加 vendor 前缀</div>
      <div class="item">可监听文件变化并重新渲染必要的文件</div>
      <div class="item">可自动处理 assets 路径</div>
      <div class="item">可只生成网站需要的部分组件</div>
      <div class="item">可使用例如 <a href="https://github.com/MohammadYounes/rtlcss" target="_blank">RTLCSS</a> 的高级用法</div>
    </div>
  </div>
  <div class="no example">
    <h3 class="ui header">目录结构</h3>
    <p>Fomantic UI 项目包含以下文件结构：</p>
    <div class="ui list">
      <div class="item">
        <i class="folder icon"></i>
        <div class="content">
          <div class="header">src</div>
          <div class="list">
            <div class="item">
              <i class="folder icon"></i>
              <div class="content">
                <a href="/usage/theming.html#site-theme" class="header">site</a>
                <div class="description">你的网站的主题</div>
              </div>
            </div>
            <div class="item">
              <i class="folder icon"></i>
              <div class="content">
                <div class="header">themes</div>
                <div class="list">
                  <div class="item">
                    <i class="folder icon"></i>
                    <div class="content">
                      <a href="/usage/theming.html#default-theme" class="header">default</a>
                      <div class="description">默认主题</div>
                    </div>
                  </div>
                  <div class="item">
                    <i class="folder icon"></i>
                    <div class="content">
                      <a href="/usage/theming.html#packaged-theme" class="header">packaged-theme</a>
                      <div class="description">其他主题</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="item">
              <i class="file icon"></i>
              <div class="content">
                <a class="header" href="#themeconfig" >theme.config</a>
                <div class="description">用于设置打包主题的配置文件</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="item">
        <i class="folder icon"></i>
        <div class="content">
          <div class="header">dist</div>
          <div class="description">已编译的 CSS 和 JS 文件</div>
          <div class="list">
            <div class="item">
              <i class="folder icon"></i>
              <div class="content">
                <div class="header">components</div>
                <div class="description">独立 CSS 和 JS 组件</div>
              </div>
            </div>
            <div class="item">
              <i class="file icon"></i>
              <div class="content">
                <div class="header">semantic.css</div>
                <div class="description">CSS 集合</div>
              </div>
            </div>
            <div class="item">
              <i class="file icon"></i>
              <div class="content">
                <div class="header">semantic.js</div>
                <div class="description">JS 集合</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="item">
        <i class="file icon"></i>
        <div class="content">
          <a href="#semanticjson" class="header">semantic.json</a>
          <div class="description">Gulp 的构建配置</div>
        </div>
      </div>
    </div>
  </div>
  <div class="no example">
    <h4>Gulp 命令</h4>
    <p>可用的 Gulp 命令如下表：</p>
    <table class="ui definition table">
      <thead>
        <th>命令</th>
        <th>描述</th>
      </thead>
      <tbody>
        <tr>
          <td>install</td>
          <td>询问一些问题以创建 semantic.json</td>
        </tr>
        <tr>
          <td>watch (默认)</td>
          <td>监视源文件更改，自动重新生成文件</td>
        </tr>
        <tr>
          <td>build</td>
          <td>构建所有文件</td>
        </tr>
        <tr>
          <td>clean</td>
          <td>清除 <code>dist/</code> 文件夹</td>
        </tr>
        <tr>
          <td>version</td>
          <td>查看当前版本</td>
        </tr>
        <tr>
          <td>build-javascript</td>
          <td>只构建 JS</td>
        </tr>
        <tr>
          <td>build-css</td>
          <td>只构建 CSS</td>
        </tr>
        <tr>
          <td>build-assets</td>
          <td>只构建 assets</td>
        </tr>
        <tr>
          <td>serve-docs</td>
          <td>向本地 docs 实例提供主题文件</td>
        </tr>
        <tr>
          <td>build-docs</td>
          <td>将主题文件构建到 docs 文件夹</td>
        </tr>
      </tbody>
    </table>
  </div>


  <h2 class="ui dividing header">配置文件</h2>

  <div class="no example">
    <h4>semantic.json</h4>
    <p><code>semantic.json</code> 存储构建设置。可存在于 Fomantic 安装文件夹的父文件夹的任何子文件夹中。</p>
    <p>如果你使用 npm 或 meteor，<code>semantic.json</code> 会自动生成。你也可以运行 <code>gulp install</code> 来手动安装。</p>
    <div class="ignored code" data-type="json" data-title="semantic.json">
    {
      // base path added to all other paths specified in "paths"
      "base": "",

      // current version of Fomantic UI
      "version": "<%= @getVersion() %>",

      "paths": {

        "source": {

          // source theme.config
          "config"      : "src/theme.config",

          // source definition folder
          "definitions" : "src/definitions/",

          // source site theme
          "site"        : "src/site/",

          // source themes folder
          "themes"      : "src/themes/"
        },

        "output": {
          // packaged source (both compressed/uncompressed)
          "packaged"     : "dist/",

          // uncompressed source
          "uncompressed" : "dist/components/",

          // compressed source
          "compressed"   : "dist/components/",

          // output directory for theme assets
          "themes"       : "dist/themes/"
        },

        // directory for gulp clean task
        "clean"        : "dist/"
      },

      // when set to an integer permission, will set dist files with this file permission
      "permission" : false,

      // whether gulp watch/build should run RTLCSS
      "rtl": false,

      // will only include components with these names
      "components": [
        "reset",
        "site",
        "button",
        "container",
        "divider",
        "flag",
        "header",
        "icon",
        "image",
        "input",
        "label",
        "list",
        "loader",
        "rail",
        "reveal",
        "segment",
        "step",
        "breadcrumb",
        "form",
        "grid",
        "menu",
        "message",
        "table",
        "ad",
        "card",
        "comment",
        "feed",
        "item",
        "statistic",
        "accordion",
        "checkbox",
        "dimmer",
        "dropdown",
        "embed",
        "modal",
        "nag",
        "popup",
        "progress",
        "rating",
        "search",
        "shape",
        "sidebar",
        "sticky",
        "tab",
        "transition",
        "api",
        "state",
        "visibility",
        "text",
        "calendar",
        "slider",
        "toast",
        "emoji"
      ],

      // generate .css/.js files for individual components (under /dist/components), but exclude them from semantic.css and semantic.js
      "individuals": [
        "form",
        "modal",
        "step",
        "emoji"
      ],

      // Use custom postcss/autoprefixer options object
      "prefix": {},

      // Use a custom Banner on each generated js/css file
      "banner": "/* A custom central FUI Banner !!!\n Awesome Release! \n*/",

      // strip all top headers from each component inside the concatenated, non-minified, semantic.css/js
      "stripHeaders": true,

      // Custom placeholder values inside banner
      "header": {
         "year": "ALWAYS 2099 :)",
         "title": "Fomantic-UI Pro",
         "repository": "Not yet available",
         "url": "https://fomantic-ui.com/pro"
      },

      // whether to include special project maintainer tasks
      "admin": false
    }

    </div>
  </div>

  <div class="no example" data-since="2.8.1">
    <h4>variation.variables</h4>
    <p>为了减少分发文件的体积，你可以禁用某个组件的某些变体。</p>
    <p>大多数组件还有一个单独的变量来决定应该为全局颜色调色板中的哪种颜色渲染哪些组件，或者应该渲染哪种尺寸。</p>

    <div class="code" data-type="less" data-title="src/themes/default/globals/variation.variables">
    // The defaults enable everything
    // In a custom theme you could only disable/adjust the variables you don't need in your own {component}.variables
    @variationButtonTertiary: false;          // don't compile tertiary button styles
    @variationIconColors: red, green, batman; // only compile red and green as icon color options
    @variationImageSizes: small, huge;        // only compile small and huge image sizes
    @variationSegmentColors: false;           // don't compile any segment color styles
    @variationBreadcrumbSizes: false;         // don't compile any breadcrumb size styles
    </div>
  </div>

  <div class="no example" data-since="2.7.0">
    <h4>colors.less</h4>
    <p>你可以通过调整 <code>colors.less</code> 中的单个 LESS Map <code>@colors</code> 来修改或定义全局颜色。</p>
    <p>每种颜色都由一组预定义的属性组成，这些属性用于所有组件。你可以定义任何你想要的颜色名称。</p>
    <div class="ui ignored info message">
        如果你只想减少默认调色板中的颜色，你应该修改 <a href="#variationvariables"><code>variation.variables</code></a>。
        <div class="code" data-type="less">
        // limit all components to yellow, purple and green
        @variationAllColors: yellow, purple, green;
        // purple buttons, red labels, green messages and no colors for all other components
        @variationAllColors: false;
        @variationButtonColors: purple;
        @variationLabelColors: red;
        @variationMessageColors: green;
        </div>
    </div>
    <div class="ui ignored warning message">
        调整调色板之后，别忘了修改 <a href="#variationvariables"><code>variation.variables</code></a> 以避免构建错误。
        <div class="code" data-type="less">
            @variationAllComponents: batman, spiderman;
        </div>
    </div>
    <div class="code" data-type="less" data-title="src/themes/default/globals/colors.less">
// This example would only provide two custom colors "batman", "spiderman"
// Your custom compiled build will contain all colorable components
// like "ui batman button" or "ui spiderman label"
    @colors: {
      @batman: {
        color          : @white;
        light          : @grey;
        border         : @grey;
        background     : @black;
        header         : #222222;
        boxShadow      : @greyBoxShadow;
        boxFloatShadow : @greyBoxFloatingShadow;
        text           : @white;
        lightText      : @white;
        hoverText      : @grey;
        focus          : @white;
        lightFocus     : @grey;
        down           : @white;
        lightDown      : @grey;
        active         : #888866;
        lightActive    : #888822;
        shadow         : @greyTextShadow;
        lightShadow    : @lightGreyTextShadow;
        hover          : @grey;
        lightHover     : @grey;
        ribbon         : @greyRibbonShadow;
        invertedRibbon : @greyInvertedRibbonShadow;
        tertiary       : @greyTertiaryColor;
        tertiaryHover  : @greyTertiaryColorHover;
        tertiaryFocus  : @greyTertiaryColorFocus;
        tertiaryActive : @greyTertiaryColorActive;
        bright         : @white;
        brightHover    : @grey;
        isDark         : false;     // 'true' will adjust light colors on non inverted variants
        isVeryDark     : false;     // 'true' will use black/white in certain color/background situations
      };
      @spiderman: {
        color          : @red;
        light          : @lightRed;
        border         : @lightRed;
        ... // and all the other properties as above
      };
    };
    </div>

    <p>colors.less 文件还包含另一个中心 LESS Map <code>@formStates</code>，用于定义表单状态。你可以定义任何表单状态名称及其颜色。</p>
    <div class="code" data-type="less" data-title="src/themes/default/globals/colors.less">

// Your final custom compiled build will offer form components like
// "ui excited input" or ".ui.form > .excited.message"
    @formStates: {
      @excited: {
        color: #880000;
        background: #ffcccc;
        borderColor: @red;
        borderRadius: 10px;
        boxShadow: @inputErrorBoxShadow;
        cornerLabelColor: @white;
        labelBackground: @lightRed;
        dropdownLabelColor: @red;
        dropdownLabelBackground: @lightRed;
        dropdownHoverBackground: @lightRed;
        dropdownSelectedBackground: @lightRed;
        dropdownActiveBackground: @lightRed;
        inputAutoFillBackground: @lightRed;
        inputAutoFillBorderColor: @red
        inputFocusBackground: @lightRed;
        inputFocusColor: @red;
        inputFocusBorderColor: #440000;
        inputFocusBoxShadow: @inputErrorFocusBoxShadow;
        inputPlaceholderColor: #660000;
        inputPlaceholderFocusColor: #550000;
        transparentBackground: @white;
        transparentColor: @red;
      };
    };

    </div>

  </div>

  <div class="no example">
    <h4>从主 CSS/JS 文件中移除组件</h4>
    <p>默认情况下，semantic.json 中列出的所有组件都会在构建时添加到 semantic.css 和 semantic.js 中，但有时为了减少文件大小，并不需要每个页面都包含某个组件，此时最好将这些组件分开，并在 HTML 中单独引用。</p>
    <p>要做到这一点，请将这些组件作为个体（individuals）添加到 semantic.json 中（参见上面的示例）。然后，CSS/JS 文件仍然会在 <code>dist/components</code> 下照常生成和更新。</p>
    <p><strong>注意：</strong> 您可以在 semantic.json 中仅指定个体，并将组件列表留空。个体会自动从主组件列表中排除。</p>
  </div>

  <div class="no example">
    <h4>theme.config</h4>
    <p>LESS 使用一个特殊的配置文件 <code>theme.config</code>，它允许你指定每个组件应该使用什么主题。如果未生成此文件，运行生成工具时会报错。</p>
    <p>要了解更多有关 <code>theme.config</code> 的信息，请参阅 <a href="/usage/theming.html#using-packaged-themes">主题指南</a>。</p>
  </div>

  <div class="no example">
    <h4>导入 Gulp 任务</h4>
    <p>有关如何将单个 Gulp 任务导入到自定义 Gulpfile 中的示例，参阅我们的<a href="/introduction/advanced-usage.html">食谱</a>部分。</p>
  </div>
  <div class="no example" data-since="2.2">
    <h4>
      自动安装和持续集成（CI）
    </h4>
    <p>2.2 中的 <code>semantic.json</code> 有一个新设置，用来帮助 CLI 或其他自动化部署更加简便。</p>
    <p>在文件中指定 <code>autoInstall: true</code> 会阻止运行 <code>npx gulp install</code> 时的任何用户提示。</p>
  </div>

</div>
