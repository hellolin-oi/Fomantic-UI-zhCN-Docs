---
layout      : 'default'
css         : 'theming'
standalone  : true
order       : 2

title       : '主题化'
description : '主题化介绍 '
type        : 'Usage'
---

<%- @partial('header') %>

<script src="/javascript/theming.js"></script>

<link rel="stylesheet/less" type="text/css" href="/src/definitions/globals/site.less" />
<link rel="stylesheet/less" type="text/css" href="/src/definitions/elements/button.less" />
<link rel="stylesheet/less" type="text/css" href="/src/definitions/modules/checkbox.less" />

<div class="main ui intro container">

  <h2 class="ui dividing header">
    前言
  </h2>

  <div class="no example">
    <h4>渐进真实性</h4>
    <blockquote>
      <p>[Progressive truthfulness] is perhaps a better way to build models of physical objects...Start with a model that is fully detailed but only resembles what is wanted. Then, one adjusts one attribute after another, bringing the result ever closer to the mental vision of the new creation, or to the real properties of a real-world object</p>
      <p>...Starting with exemplars that themselves have consistency of style ensures that such consistency is the designer's to lose.</p>
      <p>参考译文：</p>
      <p>[渐进真实性]或许是构建物理对象模型的更好方式……从一个完全详细但仅类似于所需的模型开始。然后，逐个调整属性，将结果越来越接近新创作的心理视觉或真实世界对象的真实属性。</p>
      <p>……从具有一致风格的范例开始确保了这种一致性是设计师可以失去的。</p>
      <span class="author">弗雷德 · 布鲁克斯 - <a href="https://www.amazon.com/gp/product/0201362988" target="_blank">《设计原本》</a><span>
    </blockquote>
    <p>Fomantic UI 中的组件旨在帮助开发人员在开发中坚持渐进真实性。</p>
    <p>使用 Fomantic UI 的开发人员不必从空白画布创建组件，只需使用 <a href="https://lesscss.org/features/#variables-feature" target="_blank">CSS 变量</a> 指定其组件与默认主题的区别。</p>
    <p>对于那些没有时间来磨练特定外观的开发人员来说，默认主题是优雅和中性的，带有清晰的开源无衬线字体 <a href="https://www.latofonts.com"><code>Lato</code></a>。</p>

  </div>


  <h2 class="ui dividing header">
    简单的示例
  </h2>
  <div class="no example">
    <h4>复刻一个 GitHub</h4>
    <p>Fomantic UI 有一个用于展示主体化的 <a target="_blank" href="https://semantic-org.github.io/example-github/">示例项目</a>。这个项目包括创建一个打包的主题，使用组件 CSS 覆盖，并使用 <code>theme.config</code> 管理主题的例子。</p>

    <p>要开始，请点击右上角的 <b>油漆桶</b> 图标。</p>

    <p>示例项目包括两个 HTML 文件，<code>index.html</code> 使用侧栏更改主题，并使用预编译的 CSS。<code>static.html</code> 使用 Fomantic UI 输出的文件，可以与我们的 <a href="/introduction/build-tools.html">gulp 管道</a> 一起使用，以尝试手动修改主题。</p>

    <p>需要注意的事情：</p>

    <div class="ui large bulleted list">
      <div class="item"><a target="_blank" href="https://github.com/Semantic-Org/example-github/blob/master/semantic/src/themes/github/globals/site.variables">使用 site.variables</a> 来修改页面容器大小、默认字体和颜色。</div>
      <div class="item"><a target="_blank" href="https://github.com/Semantic-Org/example-github/blob/master/semantic/src/themes/github/collections/menu.overrides">使用带变量的 overrides</a> 来添加 GitHub 样式的选项卡样式。</div>
      <div class="item">将多个单组件主题组合在一个 <a target="_blank" href="https://github.com/Semantic-Org/example-github/blob/master/semantic/src/theme.config">theme.config</a> 中。</div>
      <div class="item">使用 <a target="_blank" href="https://github.com/Semantic-Org/example-github/blob/master/semantic/src/themes/github/elements/icon.overrides">自定义图标字体</a>，并且 <a target="_blank" href="https://github.com/Semantic-Org/example-github/blob/master/semantic/src/themes/github/elements/icon.variables">修改 assets 的路径</a>。</div>
    </div>
    <a target="_blank" href="https://semantic-org.github.io/example-github/" class="ui primary right labeled icon button">
      <i class="external link icon"></i>
      查看主题化演示
    </a>
  </div>

  <h2 class="ui dividing header">
    使用主题
  </h2>
  <div class="no example">
    <h4>全站默认值</h4>

    <p>Fomantic UI 具有 12 种颜色。具有颜色的组件在定义颜色时继承这些全局变量。</p>

    <p>每一个 <a href="#theme-inheritance">继承级别</a> 都包括一个特殊文件 <code>site.variables</code>，它定义了每个组件可以扩展的主题范围内的默认值。</p>

    <p>全局变量使用更高级别的抽象概念，以避免修改多个属性来改变元素外观的繁琐操作。</p>
    <p>其他按钮阴影，例如在 <code>hover</code>、<code>active</code> 和 <code>focus</code> 状态下使用的按钮阴影，是通过修改颜色变量的饱和度和亮度来创建的，这些派生变量将自动调整到新调色板。</p>

    <div class="ui ignored code" data-type="less" data-less="true" data-title="site/globals/site.variables">
    @primaryColor   : @pink;
    @secondaryColor : @grey;
    @red            : #DB2828;
    @orange         : #FE9A76;
    @yellow         : #FFD700;
    @olive          : #32CD32;
    @green          : #016936;
    @teal           : #008080;
    @blue           : #0E6EB8;
    @violet         : #EE82EE;
    @purple         : #B413EC;
    @pink           : #FF1493;
    @brown          : #A52A2A;
    @grey           : #A0A0A0;
    @black          : #000000;
    </div>

    <button class="ui primary button">
      主要按钮
    </button>
    <button class="ui secondary button">
      次要按钮
    </button>
    <div class="ui horizontal divider">所有颜色</div>
    <button class="ui red button">红色</button>
    <button class="ui orange button">橙色</button>
    <button class="ui yellow button">黄色</button>
    <button class="ui olive button">黄褐色</button>
    <button class="ui green button">绿色</button>
    <button class="ui teal button">青色</button>
    <button class="ui blue button">蓝色</button>
    <button class="ui violet button">紫罗兰色</button>
    <button class="ui purple button">紫色</button>
    <button class="ui pink button">粉色</button>
    <button class="ui brown button">棕色</button>
    <button class="ui grey button">灰色</button>
    <button class="ui black button">黑色</button>
  </div>
  <div class="no example">
    <h4>组件默认值</h4>
    <p>组件从 <code>site.variables</code> 继承默认值，它们可以专门为其组件重定义这些值。</p>
    <p>例如，你可以决定不再使用无聊的默认灰色复选框，而是想要使用你网站的品牌颜色。这只需改变几个变量就能实现。</p>
    <div class="ui ignored code" data-type="less" data-less="true" data-title="site/modules/checkbox.variables">
      /* Checkbox */
      @checkboxActiveBackground: @primaryColor;
      @checkboxActiveBorderColor: @primaryColor;
      @checkboxActiveCheckColor: @white;
      /* Focused Checkbox */
      @checkboxActiveFocusBackground: @primaryColorFocus;
      @checkboxActiveFocusBorderColor: @primaryColorFocus;
      @checkboxActiveFocusCheckColor: @white;
      @checkboxTransition: none;
      /* Radio */
      @radioActiveBackground: @white;
      @radioActiveBorderColor: @primaryColor;
      @radioActiveBulletColor: @primaryColor;
      /* Focused Radio */
      @radioActiveFocusBackground: @white;
      @radioActiveFocusBorderColor: @primaryColorFocus;
      @radioActiveFocusBulletColor: @primaryColorFocus;
      /* Slider */
      @sliderOnLineColor: @primaryColor;
      /* Focused Slider */
      @sliderOnFocusLineColor: @primaryColorFocus;
    </div>
    <div class="ui checkbox">
      <input type="checkbox" name="checkbox" checked >
      <label>复选框</label>
    </div>

    <div class="ui hidden divider"></div>
    <div class="ui form">
      <div class="inline fields">
        <div class="field">
          <div class="ui radio checkbox">
            <input type="radio" name="radio" checked />
            <label>A</label>
          </div>
        </div>
        <div class="field">
          <div class="ui radio checkbox">
            <input type="radio" name="radio" />
            <label>B</label>
          </div>
        </div>
        <div class="field">
          <div class="ui radio checkbox">
            <input type="radio" name="radio" />
            <label>C</label>
          </div>
        </div>
        <div class="field">
          <div class="ui radio checkbox">
            <input type="radio" name="radio" />
            <label>D</label>
          </div>
        </div>
      </div>
    </div>

    <div class="ui hidden divider"></div>
    <div class="ui slider checkbox">
      <input type="checkbox" name="slider" checked>
      <label>滑块</label>
    </div>
  </div>
  <div class="no example">
    <h4>使用打包的主题</h4>
    <p>下载 Fomantic UI 后，所有组件都使用默认主题。由 <code>theme.config</code> 文件来控制项目的打包主题设置。</p>
    <p>打包的主题按组件应用，而非全局应用。这意味着你可以为每个组件指定单独的主题，可以混搭主题。</p>
    <p>默认的 <code>theme.config</code> 会将所有组件主题设置为默认。要选择一个主题，只需要改动主题字符串。</p>

    <p>例如：</p>
    <div class="code" data-title="src/theme.config" data-type="less">
    /*******************************
            Theme Selection
    *******************************/

    /* Global */
    @site       : 'material';  /* Loads material site defaults */
    @reset      : 'default';

    /* Text */
    @placeholder: 'default';
    @text       : 'default';

    /* Elements */
    @button     : 'github'; /* But uses them with GitHub Buttons */
    @container  : 'default';
    @divider    : 'default';
    @emoji      : 'default';
    @flag       : 'default';
    @header     : 'default';
    @icon       : 'default';
    @image      : 'default';
    @input      : 'default';
    @label      : 'default';
    @list       : 'default';
    @loader     : 'default';
    @rail       : 'default';
    @reveal     : 'default';
    @segment    : 'default';
    @step       : 'default';

    /* Collections */
    @breadcrumb : 'default';
    @form       : 'default';
    @grid       : 'default';
    @menu       : 'chubby'; /* Other UI can use different themes as well */
    @message    : 'default';
    @table      : 'default';

    /* Modules */
    @accordion  : 'default';
    @calendar   : 'default';
    @checkbox   : 'default';
    @dimmer     : 'default';
    @dropdown   : 'default';
    @embed      : 'default';
    @modal      : 'default';
    @nag        : 'default';
    @popup      : 'default';
    @progress   : 'default';
    @rating     : 'default';
    @search     : 'default';
    @shape      : 'default';
    @sidebar    : 'default';
    @slider     : 'default';
    @sticky     : 'default';
    @tab        : 'default';
    @toast      : 'default';
    @transition : 'default';

    /* Views */
    @ad         : 'default';
    @card       : 'default';
    @comment    : 'default';
    @feed       : 'default';
    @item       : 'default';
    @statistic  : 'default';
    </div>
  </div>

  <div class="no example">
    <h4>浏览主题</h4>
    <p>每个 UI 组件介绍页面都在顶部有一个按钮，用它可以预览项目中包含的主题。</p>
    <p>主题是针对 <b>单个组件的</b>，因此，例如，material 主题适用于<a href="/collections/menu.html">菜单</a>、<a href="/elements/button.html">按钮</a> 和 <a href="/globals/site.html">全站</a>，将不包含 material 主题的组件设置为 material 主题会报错。</p>
  </div>

  <h2 class="ui dividing header">
    自定义组件
  </h2>


  <div class="no example">
    <h4 class="ui header">定义文件</h4>
    <p>每个组件都包含一个 CSS 和 JS 文件，该文件声明了组件变量在屏幕上的显示效果。定义文件随 Fomantic UI 的每个新版本更新，其中可能还包含新变量。</p>
    <p>导航定义文件是开发者了解主题如何影响组件显示的一个很好方式，尤其是对于那些熟悉CSS的开发者来说。</p>

    <p>以下是一个简化版本的 <a href="/elements/button.html">按钮</a>。</p>

    <div class="code" data-type="less" data-title="src/definitions/elements/button.less">

/*******************************
                Theme
*******************************/

/* Define type and element to help locate theme files */
@type    : 'element';
@element : 'button';

/* Processes Variable Inheritance */
@import (multiple) '../../theme.config';

/* Create scope */
& {

/*******************************
               Button
*******************************/

/* Define Component */
.ui.button {
  cursor: pointer;
  display: inline-block;

  min-height: 1em;

  outline: none;
  border: none;
  vertical-align: @verticalAlign;
  background: @background;
  color: @textColor;

  font-family: @fontFamily;

  margin: 0 @horizontalMargin @verticalMargin 0;
  padding: @verticalPadding @horizontalPadding (@verticalPadding + @shadowOffset);

  text-transform: @textTransform;
  text-shadow: @textShadow;
  font-weight: @fontWeight;
  line-height: @lineHeight;
  font-style: normal;
  text-align: center;
  text-decoration: none;

  border-radius: @borderRadius;
  box-shadow: @boxShadow;

  user-select: none;
  transition: @transition;
  will-change: @willChange;

  -webkit-tap-highlight-color: @tapColor;
}

/* Additional CSS removed for brevity */

/* Load CSS Overrides and Inline */
.loadUIOverrides();

}

    </div>
  </div>

  <div class="no example">
    <h4 class="ui header">主题文件</h4>
    <p>主题由两个文件组成：<code>.variables</code> 和 <code>.overrides</code>。主题可以包括其中的一个或两个。</p>
  </div>
  <div class="no example">
    <h4 class="ui header">变量文件</h4>
    <p><code>.variables</code> 文件指定了应该为这个主题调整的变量。</p>
    <p>一个主题的变量文件只需要包含不同主题的变量。</p>
  </div>
  <div class="no example">
    <h4 class="ui header">覆写文件</h4>
    <p><code>.overrides</code> 文件指定要添加到主题定义中的其他 CSS 规则。该文件还可以访问组件的所有继承变量。</p>
  </div>

  <h2 class="ui dividing header">
    级联继承
  </h2>

  <div class="no example">
    <h4 class="ui header">主题继承</h4>
    <p>主题包含三个独立的变量继承级别。</p>
    <p>每个继承级别对应于变量的不同持久性级别。</p>
    <div class="ui fluid steps">
      <div class="step">
        <i class="lock icon"></i>
        <div class="content">
          <div class="title">默认</div>
          <div class="description">UI 默认主题</div>
        </div>
      </div>
      <div class="step">
        <i class="download icon"></i>
        <div class="content">
          <div class="title">打包主题</div>
          <div class="description">可分发的主题包</div>
        </div>
      </div>
    <div class="step">
        <i class="user icon"></i>
        <div class="content">
          <div class="title">网站主题</div>
          <div class="description">站点特别指定的变更</div>
        </div>
      </div>
    </div>
  </div>

  <div class="no example">
    <h4 class="ui header">默认主题</h4>
    <div class="ui breadcrumb">
      <div class="section">
        <i class="disabled folder icon"></i>
        src
      </div>
      <i class="right chevron icon divider"></i>
      <div class="section">
        <i class="disabled folder icon"></i>
        themes
      </div>
      <i class="right chevron icon divider"></i>
      <div class="active section">
        <i class="inverted circular teal folder icon"></i>
        default
      </div>
    </div>
    <p>默认主题为每个组件提供基本的变量。</p>
    <p>了解主题中包含哪些变量的最佳方式是参阅组件默认 <code>.variables</code> 文件。</p>
  </div>

  <div class="no example">
    <h4 class="ui header">打包主题</h4>
    <div class="ui breadcrumb">
      <div class="section">
        <i class="disabled folder icon"></i>
        src
      </div>
      <i class="right chevron icon divider"></i>
      <div class="section">
        <i class="disabled folder icon"></i>
        themes
      </div>
      <i class="right chevron icon divider"></i>
      <div class="active section">
        <i class="inverted circular teal folder icon"></i>
        theme-name
      </div>
    </div>
    <p>打包主题将主题捆绑到一个文件夹中以便于分发。这些主题可以从互联网上下载，也可在不同项目中使用。</p>
    <p>可以通过修改 <a href="#using-packaged-themes">theme.config</a> 来使用打包主题。</p>
  </div>

  <div class="no example">
    <h4 class="ui header">网站主题</h4>
    <div class="ui breadcrumb">
      <div class="section">
        <i class="disabled folder icon"></i>
        src
      </div>
      <i class="right chevron icon divider"></i>
      <div class="active section">
        <i class="inverted circular teal folder icon"></i>
        site
      </div>
    </div>
    <p>网站主题，不同于 <code>site.variables</code>，这是一个用户定义的主题，其优先级在前两个主题之上。</p>
    <p>如果某个主题只适用于一个站点，那么网站主题是最佳的选择。网站主题类似于 WordPress 中的 <a href="https://codex.wordpress.org/zh-cn:%E5%AD%90%E4%B8%BB%E9%A2%98" target="_blank">子主题</a>。</p>
    <p>网站主题是 <b>可选的</b>，如果不需要，你可以安全地将它删除。</p>
  </div>
</div>
